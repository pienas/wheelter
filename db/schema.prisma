datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int           @id @default(autoincrement())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  lastSeen         DateTime?
  name             String
  surname          String
  email            String        @unique
  emailVerifiedAt  DateTime?
  phone            String        @unique
  hashedPassword   String?
  avatarUrl        String?
  role             String        @default("USER")
  tokens           Token[]
  sessions         Session[]
  orders           Order[]
  reviews          Review[]
  favoriteServices CarService[]
  vehicles         Vehicle[]
  settings         UserSetting[]
}

model Vehicle {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  type          String
  make          String
  model         String
  year          Int
  fuelType      String
  bodyType      String
  gearbox       String
  displacement  Float
  kw            Int
  drivingWheels String?
  engineCode    String?
  colorCode     String?
  vinCode       String?
  user          User?    @relation(fields: [userId], references: [id])
  userId        Int?
}

model UserSetting {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  settingId Int
  value     Float?
  status    Boolean?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?

  @@unique([hashedToken, type])
}

model CarServiceUser {
  id                     Int                      @id @default(autoincrement())
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  lastSeen               DateTime?
  name                   String
  surname                String
  email                  String                   @unique
  emailVerifiedAt        DateTime?
  phone                  String                   @unique
  hashedPassword         String?
  avatarUrl              String?
  tokens                 CarServiceUserToken[]
  sessions               CarServiceUserSession[]
  changes                Change[]
  notes                  Note[]
  goals                  Goal[]
  notifications          Notification[]
  settings               CarServiceUserSetting[]
  carServiceUserRelation CarServiceUserRelation[]
}

model CarServiceUserSetting {
  id               Int             @id @default(autoincrement())
  updatedAt        DateTime        @updatedAt
  settingId        Int
  value            Float?
  status           Boolean?
  carServiceUser   CarServiceUser? @relation(fields: [carServiceUserId], references: [id])
  carServiceUserId Int?
}

model CarServiceUserSession {
  id                 Int             @id @default(autoincrement())
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  expiresAt          DateTime?
  handle             String          @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               CarServiceUser? @relation(fields: [userId], references: [id])
  userId             Int?
}

model CarServiceUserToken {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String
  user        CarServiceUser? @relation(fields: [userId], references: [id])
  userId      Int?

  @@unique([hashedToken, type])
}

model CarService {
  id                     Int                      @id @default(autoincrement())
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  plan                   String                   @default("STANDARD")
  paymentExpiresAt       DateTime?
  paymentMethod          String?
  paymentUrl             String?
  lastSeen               DateTime?
  url                    String                   @unique
  name                   String
  description            String?
  email                  String                   @unique
  emailVerifiedAt        DateTime?
  phone                  String                   @unique
  income                 Float                    @default(0.0)
  expenses               Float                    @default(0.0)
  viewCount              Int                      @default(0)
  isActive               Boolean                  @default(false)
  isReviewed             Boolean                  @default(false)
  avatarUrl              String?
  changes                Change[]
  orders                 Order[]
  types                  Type[]
  categories             Category[]
  employees              Employee[]
  settings               Setting[]
  promos                 Promo[]
  notes                  Note[]
  address                Address[]
  goals                  Goal[]
  images                 Image[]
  usersWhoLike           User[]
  carServiceUserRelation CarServiceUserRelation[]
  reviews                Review[]
}

model CarServiceUserRelation {
  id           Int            @id @default(autoincrement())
  carService   CarService     @relation(fields: [carServiceId], references: [id])
  carServiceId Int
  user         CarServiceUser @relation(fields: [userId], references: [id])
  userId       Int
  userRole     String         @default("Darbuotojas")
}

model Change {
  id           Int             @id @default(autoincrement())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  content      String
  author       CarServiceUser? @relation(fields: [authorId], references: [id])
  authorId     Int?
  carService   CarService?     @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Order {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  startsAt     DateTime
  price        Float       @default(0.0)
  status       String      @default("NEW")
  review       Review?
  service      Service?    @relation(fields: [serviceId], references: [id])
  serviceId    Int?
  employee     Employee?   @relation(fields: [employeeId], references: [id])
  employeeId   Int?
  client       User?       @relation(fields: [clientId], references: [id])
  clientId     Int?
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Review {
  id           Int         @id @default(autoincrement())
  rating       Int
  content      String?
  isReviewed   Boolean     @default(false)
  order        Order?      @relation(fields: [orderId], references: [id])
  orderId      Int?
  author       User?       @relation(fields: [authorId], references: [id])
  authorId     Int?
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Type {
  id           Int         @id @default(autoincrement())
  name         String
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Category {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  name         String
  description  String?
  services     Service[]
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Service {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageUrl    String?
  name        String
  description String?
  price       Float
  duration    Int
  viewCount   Int       @default(0)
  orders      Order[]
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  promo       Promo?    @relation(fields: [promoId], references: [id])
  promoId     Int?
}

model Employee {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  name         String
  surname      String?
  orders       Order[]
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Setting {
  id           Int         @id @default(autoincrement())
  updatedAt    DateTime    @updatedAt
  settingId    Int
  value        Float?
  status       Boolean?
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Promo {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  startsAt     DateTime    @default(now())
  endsAt       DateTime?
  code         String      @unique
  count        Int?
  isRedeemed   Boolean     @default(false)
  title        String
  description  String
  services     Service[]
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Note {
  id           Int             @id @default(autoincrement())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  title        String
  content      String
  isDone       Boolean         @default(false)
  author       CarServiceUser? @relation(fields: [authorId], references: [id])
  authorId     Int?
  carService   CarService?     @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Address {
  id           Int         @id @default(autoincrement())
  city         String
  street       String
  house        Int
  appartment   Int?
  postCode     Int
  coordinateX  Float?
  coordinateY  Float?
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Goal {
  id           Int             @id @default(autoincrement())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  type         String
  progress     Float           @default(0.0)
  goal         Float
  author       CarServiceUser? @relation(fields: [authorId], references: [id])
  authorId     Int?
  carService   CarService?     @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Notification {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  type             String
  title            String
  content          String
  seen             Boolean         @default(false)
  carServiceUser   CarServiceUser? @relation(fields: [carServiceUserId], references: [id])
  carServiceUserId Int?
}

model Image {
  id           Int         @id @default(autoincrement())
  imageUrl     String
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}
