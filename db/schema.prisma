datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int           @id @default(autoincrement())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  lastSeen         DateTime?
  name             String
  surname          String
  email            String        @unique
  emailVerifiedAt  DateTime?
  phone            String?       @unique
  hashedPassword   String?
  avatarUrl        String?
  role             UserRole      @default(USER)
  tokens           Token[]
  sessions         Session[]
  orders           Order[]
  reviews          Review[]
  favoriteServices CarService[]
  vehicles         Vehicle[]
  settings         UserSetting[]
  logs             Log[]
  inviteToken      InviteToken?  @relation(fields: [inviteTokenId], references: [id])
  inviteTokenId    Int?
}

model Vehicle {
  id            Int                @id @default(autoincrement())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  type          VehicleType        @default(CAR)
  shortMake     String
  make          String
  model         String
  year          Int
  fuelType      FuelType           @default(PETROL)
  bodyType      BodyType           @default(SEDAN)
  gearbox       GearboxType        @default(MANUAL)
  displacement  Float
  kw            Int
  drivingWheels DrivingWheelsType?
  engineCode    String?
  colorCode     String?
  vinCode       String?
  orders        Order[]
  user          User?              @relation(fields: [userId], references: [id])
  userId        Int?
}

model UserSetting {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  settingId Int
  value     Float?
  status    Boolean?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?

  @@unique([hashedToken, type])
}

model InviteToken {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  hashedToken  String
  type         String
  expiresAt    DateTime
  createdBy    User[]
  carService   CarService @relation(fields: [carServiceId], references: [id])
  carServiceId Int

  @@unique([hashedToken, type])
}

model CarServiceUser {
  id                     Int                      @id @default(autoincrement())
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  lastSeen               DateTime?
  name                   String
  surname                String
  email                  String                   @unique
  emailVerifiedAt        DateTime?
  phone                  String                   @unique
  hashedPassword         String?
  avatarUrl              String?
  role                   CarServiceUserRole       @default(EMPLOYEE)
  tokens                 CarServiceUserToken[]
  sessions               CarServiceUserSession[]
  changes                Change[]
  notes                  Note[]
  goals                  Goal[]
  notificationsOrder     NotificationOrder[]
  notificationsUpdate    NotificationUpdate[]
  settings               CarServiceUserSetting[]
  invoices               Invoice[]
  employee               Employee[]
  carServiceUserRelation CarServiceUserRelation[]
}

model CarServiceUserSetting {
  id               Int             @id @default(autoincrement())
  updatedAt        DateTime        @updatedAt
  settingId        Int
  value            Float?
  status           Boolean?
  carServiceUser   CarServiceUser? @relation(fields: [carServiceUserId], references: [id])
  carServiceUserId Int?
}

model CarServiceUserSession {
  id                 Int             @id @default(autoincrement())
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  expiresAt          DateTime?
  handle             String          @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               CarServiceUser? @relation(fields: [userId], references: [id])
  userId             Int?
}

model CarServiceUserToken {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String
  user        CarServiceUser? @relation(fields: [userId], references: [id])
  userId      Int?

  @@unique([hashedToken, type])
}

model CarService {
  id                     Int                      @id @default(autoincrement())
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  plan                   PlanType                 @default(STANDARD)
  paymentExpiresAt       DateTime?
  paymentMethod          String?
  paymentUrl             String?
  lastSeen               DateTime?
  url                    String                   @unique
  name                   String
  description            String?
  email                  String
  emailVerifiedAt        DateTime?
  phone                  String
  income                 Float                    @default(0.0)
  expenses               Float                    @default(0.0)
  viewCount              Int                      @default(0)
  isActive               Boolean                  @default(false)
  isReviewed             Boolean                  @default(false)
  isUnderReview          Boolean                  @default(false)
  avatarUrl              String?
  changes                Change[]
  orders                 Order[]
  types                  Type[]
  categories             Category[]
  employees              Employee[]
  settings               Setting[]
  promos                 Promo[]
  notes                  Note[]
  address                Address?
  goals                  Goal[]
  images                 Image[]
  usersWhoLike           User[]
  reviews                Review[]
  tokens                 InviteToken[]
  logs                   Log[]
  carServiceUserRelation CarServiceUserRelation[]
}

model CarServiceUserRelation {
  id              Int                @id @default(autoincrement())
  completedOrders Int                @default(0)
  userRole        CarServiceUserRole @default(EMPLOYEE)
  carService      CarService         @relation(fields: [carServiceId], references: [id])
  carServiceId    Int
  user            CarServiceUser     @relation(fields: [userId], references: [id])
  userId          Int
}

model Change {
  id           Int             @id @default(autoincrement())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  content      String
  author       CarServiceUser? @relation(fields: [authorId], references: [id])
  authorId     Int?
  carService   CarService?     @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Order {
  id                String             @id
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  startsAt          DateTime
  price             Float              @default(0.0)
  status            OrderStatus        @default(NEW)
  paymentMethod     PaymentMethodType  @default(CASH)
  vehicle           Vehicle            @relation(fields: [vehicleId], references: [id])
  vehicleId         Int
  review            Review?
  notificationOrder NotificationOrder?
  promo             Promo?             @relation(fields: [promoId], references: [id])
  promoId           Int?
  service           Service            @relation(fields: [serviceId], references: [id])
  serviceId         Int
  employee          Employee?          @relation(fields: [employeeId], references: [id])
  employeeId        Int?
  client            User               @relation(fields: [clientId], references: [id])
  clientId          Int
  carService        CarService         @relation(fields: [carServiceId], references: [id])
  carServiceId      Int
}

model Review {
  id           Int         @id @default(autoincrement())
  rating       Int
  content      String?
  isReviewed   Boolean     @default(false)
  order        Order?      @relation(fields: [orderId], references: [id])
  orderId      String?
  author       User?       @relation(fields: [authorId], references: [id])
  authorId     Int?
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Type {
  id           Int         @id @default(autoincrement())
  name         String
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Category {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  name         String
  description  String?
  services     Service[]
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Service {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  imageUrl     String?
  name         String
  description  String?
  price        Float
  durationFrom Int
  durationTo   Int
  viewCount    Int       @default(0)
  orders       Order[]
  category     Category? @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  promo        Promo?    @relation(fields: [promoId], references: [id])
  promoId      Int?
}

model Employee {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  name               String
  surname            String?
  position           String
  completedOrders    Int                  @default(0)
  orders             Order[]
  notificationUpdate NotificationUpdate[]
  carService         CarService?          @relation(fields: [carServiceId], references: [id])
  carServiceId       Int?
  carServiceUser     CarServiceUser?      @relation(fields: [carServiceUserId], references: [id])
  carServiceUserId   Int?
}

model Setting {
  id           Int         @id @default(autoincrement())
  updatedAt    DateTime    @updatedAt
  settingId    Int
  value        Float?
  status       Boolean?
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Promo {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  startsAt     DateTime    @default(now())
  endsAt       DateTime?
  code         String      @unique
  count        Int?
  isRedeemed   Boolean     @default(false)
  title        String
  description  String
  discount     Int
  services     Service[]
  orders       Order[]
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Note {
  id           Int             @id @default(autoincrement())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  title        String
  content      String
  isDone       Boolean         @default(false)
  author       CarServiceUser? @relation(fields: [authorId], references: [id])
  authorId     Int?
  carService   CarService?     @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model Address {
  id           Int         @id @default(autoincrement())
  city         String
  street       String
  house        String
  coordinateX  Float?
  coordinateY  Float?
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?        @unique
}

model Goal {
  id           Int             @id @default(autoincrement())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  type         String
  progress     Float           @default(0.0)
  goal         Float
  author       CarServiceUser? @relation(fields: [authorId], references: [id])
  authorId     Int?
  carService   CarService?     @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

model NotificationOrder {
  id               Int                          @id @default(autoincrement())
  createdAt        DateTime                     @default(now())
  read             Boolean                      @default(false)
  seen             Boolean                      @default(false)
  type             NotificationOrderType
  updateType       NotificationOrderUpdateType?
  order            Order?                       @relation(fields: [orderId], references: [id])
  orderId          String?
  carServiceUser   CarServiceUser?              @relation(fields: [carServiceUserId], references: [id])
  carServiceUserId Int?
}

model NotificationUpdate {
  id               Int                    @id @default(autoincrement())
  createdAt        DateTime               @default(now())
  read             Boolean                @default(false)
  seen             Boolean                @default(false)
  type             NotificationUpdateType
  title            String?
  message          String?
  employee         Employee?              @relation(fields: [employeeId], references: [id])
  employeeId       Int?
  carServiceUser   CarServiceUser?        @relation(fields: [carServiceUserId], references: [id])
  carServiceUserId Int?
}

model Image {
  id                Int         @id @default(autoincrement())
  imageUrl          String
  carServiceImageId Int?
  carService        CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId      Int?
}

model Invoice {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  plan             PlanType        @default(STANDARD)
  total            Float           @default(19.99)
  status           InvoiceStatus   @default(PENDING)
  carServiceUser   CarServiceUser? @relation(fields: [carServiceUserId], references: [id])
  carServiceUserId Int?
}

model Log {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedWhat  String
  updatedBy    User?       @relation(fields: [updatedById], references: [id])
  updatedById  Int?
  carService   CarService? @relation(fields: [carServiceId], references: [id])
  carServiceId Int?
}

enum UserRole {
  USER
  ADMIN
}

enum CarServiceUserRole {
  EMPLOYEE
  OWNER
  ADMIN
}

enum NotificationOrderType {
  NEW
  UPDATED
  CANCELLED
}

enum NotificationOrderUpdateType {
  TIME
}

enum NotificationUpdateType {
  UPDATE
  EMPLOYEE
}

enum OrderStatus {
  NEW
  ACTIVE
  DONE
  CANCELLED
}

enum VehicleType {
  CAR
  MOTORCYCLE
  HEAVYTRANSPORT
}

enum FuelType {
  PETROL
  DIESEL
  PETROLGAS
  PETROLELECTRICITY
  ELECTRICITY
  DIESELELECTRICITY
  BIOETANOL
  OTHER
}

enum BodyType {
  SEDAN
  HATCHBACK
  UNIVERSAL
  MONOTONOUS
  SUV
  COUPE
  COMMERCIAL
  CABRIOLET
  LIMOUSINE
  PICKUP
  MINIBUS
  CHOPPER
  KARTING
  QUAD
  SNOWMOBILE
  TRICYCLE
  SUPERBIKE
  CROSS
  STREETBIKE
  TOURING
  TRUCK
  VAN
  TRAWL
  OTHER
}

enum DrivingWheelsType {
  FWD
  RWD
  AWD
}

enum GearboxType {
  MANUAL
  AUTOMATIC
}

enum PlanType {
  STANDARD
  PREMIUM
  CUSTOM
}

enum InvoiceStatus {
  PENDING
  SUCCESS
  CANCELLED
}

enum PaymentMethodType {
  CASH
  CARD
}
